// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ActiveEvents;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace Event_Attendees_Tracker.Modals.Response_Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ActiveEvents
    {
        [JsonProperty("ID")]
        public long Id { get; set; }

        [JsonProperty("EventName")]
        public string EventName { get; set; }

        [JsonProperty("Description")]
        public string Description { get; set; }

        [JsonProperty("Venue")]
        public string Venue { get; set; }

        [JsonProperty("StartTime")]
        public DateTimeOffset StartTime { get; set; }

        [JsonProperty("EndTime")]
        public DateTimeOffset EndTime { get; set; }

        [JsonProperty("EventDate")]
        public DateTimeOffset EventDate { get; set; }

        [JsonProperty("PosterImage")]
        public string PosterImage { get; set; }

        [JsonProperty("isActive")]
        public bool IsActive { get; set; }

        [JsonProperty("CreatedAt")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("CreatedBy")]
        public long CreatedBy { get; set; }

        [JsonProperty("UpdatedAt")]
        public object UpdatedAt { get; set; }

        [JsonProperty("UpdatedBy")]
        public object UpdatedBy { get; set; }

        [JsonProperty("CanRegister")]
        public bool CanRegister { get; set; }
    }

    public partial class ActiveEvents
    {
        public static List<ActiveEvents> FromJson(string json) => JsonConvert.DeserializeObject<List<ActiveEvents>>(json, Converter.Settings);
    }
    public partial class PastEvents
    {
        [JsonProperty("ID")]
        public long Id { get; set; }

        [JsonProperty("EventName")]
        public string EventName { get; set; }

        [JsonProperty("Description")]
        public string Description { get; set; }

        [JsonProperty("Venue")]
        public string Venue { get; set; }

        [JsonProperty("StartTime")]
        public DateTimeOffset StartTime { get; set; }

        [JsonProperty("EndTime")]
        public DateTimeOffset EndTime { get; set; }

        [JsonProperty("EventDate")]
        public DateTimeOffset EventDate { get; set; }

        [JsonProperty("PosterImage")]
        public string PosterImage { get; set; }

        [JsonProperty("isActive")]
        public bool IsActive { get; set; }

        [JsonProperty("CreatedAt")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("CreatedBy")]
        public long CreatedBy { get; set; }

        [JsonProperty("UpdatedAt")]
        public object UpdatedAt { get; set; }

        [JsonProperty("UpdatedBy")]
        public object UpdatedBy { get; set; }

        [JsonProperty("CanRegister")]
        public bool CanRegister { get; set; }
    }

    public partial class PastEvents
    {
        public static List<PastEvents> FromJson(string json) => JsonConvert.DeserializeObject<List<PastEvents>>(json, Converter.Settings);
    }

    public static  class Serialize
    {
        public static string ToJson(this List<ActiveEvents> self) => JsonConvert.SerializeObject(self, Converter.Settings);
       
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
